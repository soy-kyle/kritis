/*
Copyright 2018 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/soy-kyle/kritis/pkg/kritis/apis/kritis/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AttestationAuthorityLister helps list AttestationAuthorities.
type AttestationAuthorityLister interface {
	// List lists all AttestationAuthorities in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.AttestationAuthority, err error)
	// AttestationAuthorities returns an object that can list and get AttestationAuthorities.
	AttestationAuthorities(namespace string) AttestationAuthorityNamespaceLister
	AttestationAuthorityListerExpansion
}

// attestationAuthorityLister implements the AttestationAuthorityLister interface.
type attestationAuthorityLister struct {
	indexer cache.Indexer
}

// NewAttestationAuthorityLister returns a new AttestationAuthorityLister.
func NewAttestationAuthorityLister(indexer cache.Indexer) AttestationAuthorityLister {
	return &attestationAuthorityLister{indexer: indexer}
}

// List lists all AttestationAuthorities in the indexer.
func (s *attestationAuthorityLister) List(selector labels.Selector) (ret []*v1beta1.AttestationAuthority, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.AttestationAuthority))
	})
	return ret, err
}

// AttestationAuthorities returns an object that can list and get AttestationAuthorities.
func (s *attestationAuthorityLister) AttestationAuthorities(namespace string) AttestationAuthorityNamespaceLister {
	return attestationAuthorityNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AttestationAuthorityNamespaceLister helps list and get AttestationAuthorities.
type AttestationAuthorityNamespaceLister interface {
	// List lists all AttestationAuthorities in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.AttestationAuthority, err error)
	// Get retrieves the AttestationAuthority from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.AttestationAuthority, error)
	AttestationAuthorityNamespaceListerExpansion
}

// attestationAuthorityNamespaceLister implements the AttestationAuthorityNamespaceLister
// interface.
type attestationAuthorityNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AttestationAuthorities in the indexer for a given namespace.
func (s attestationAuthorityNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.AttestationAuthority, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.AttestationAuthority))
	})
	return ret, err
}

// Get retrieves the AttestationAuthority from the indexer for a given namespace and name.
func (s attestationAuthorityNamespaceLister) Get(name string) (*v1beta1.AttestationAuthority, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("attestationauthority"), name)
	}
	return obj.(*v1beta1.AttestationAuthority), nil
}
