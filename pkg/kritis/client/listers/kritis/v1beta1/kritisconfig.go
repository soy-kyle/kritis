/*
Copyright 2018 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/soy-kyle/kritis/pkg/kritis/apis/kritis/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KritisConfigLister helps list KritisConfigs.
type KritisConfigLister interface {
	// List lists all KritisConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.KritisConfig, err error)
	// Get retrieves the KritisConfig from the index for a given name.
	Get(name string) (*v1beta1.KritisConfig, error)
	KritisConfigListerExpansion
}

// kritisConfigLister implements the KritisConfigLister interface.
type kritisConfigLister struct {
	indexer cache.Indexer
}

// NewKritisConfigLister returns a new KritisConfigLister.
func NewKritisConfigLister(indexer cache.Indexer) KritisConfigLister {
	return &kritisConfigLister{indexer: indexer}
}

// List lists all KritisConfigs in the indexer.
func (s *kritisConfigLister) List(selector labels.Selector) (ret []*v1beta1.KritisConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.KritisConfig))
	})
	return ret, err
}

// Get retrieves the KritisConfig from the index for a given name.
func (s *kritisConfigLister) Get(name string) (*v1beta1.KritisConfig, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("kritisconfig"), name)
	}
	return obj.(*v1beta1.KritisConfig), nil
}
