/*
Copyright 2018 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/soy-kyle/kritis/pkg/kritis/apis/kritis/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GenericAttestationPolicyLister helps list GenericAttestationPolicies.
type GenericAttestationPolicyLister interface {
	// List lists all GenericAttestationPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.GenericAttestationPolicy, err error)
	// GenericAttestationPolicies returns an object that can list and get GenericAttestationPolicies.
	GenericAttestationPolicies(namespace string) GenericAttestationPolicyNamespaceLister
	GenericAttestationPolicyListerExpansion
}

// genericAttestationPolicyLister implements the GenericAttestationPolicyLister interface.
type genericAttestationPolicyLister struct {
	indexer cache.Indexer
}

// NewGenericAttestationPolicyLister returns a new GenericAttestationPolicyLister.
func NewGenericAttestationPolicyLister(indexer cache.Indexer) GenericAttestationPolicyLister {
	return &genericAttestationPolicyLister{indexer: indexer}
}

// List lists all GenericAttestationPolicies in the indexer.
func (s *genericAttestationPolicyLister) List(selector labels.Selector) (ret []*v1beta1.GenericAttestationPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.GenericAttestationPolicy))
	})
	return ret, err
}

// GenericAttestationPolicies returns an object that can list and get GenericAttestationPolicies.
func (s *genericAttestationPolicyLister) GenericAttestationPolicies(namespace string) GenericAttestationPolicyNamespaceLister {
	return genericAttestationPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GenericAttestationPolicyNamespaceLister helps list and get GenericAttestationPolicies.
type GenericAttestationPolicyNamespaceLister interface {
	// List lists all GenericAttestationPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.GenericAttestationPolicy, err error)
	// Get retrieves the GenericAttestationPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.GenericAttestationPolicy, error)
	GenericAttestationPolicyNamespaceListerExpansion
}

// genericAttestationPolicyNamespaceLister implements the GenericAttestationPolicyNamespaceLister
// interface.
type genericAttestationPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GenericAttestationPolicies in the indexer for a given namespace.
func (s genericAttestationPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.GenericAttestationPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.GenericAttestationPolicy))
	})
	return ret, err
}

// Get retrieves the GenericAttestationPolicy from the indexer for a given namespace and name.
func (s genericAttestationPolicyNamespaceLister) Get(name string) (*v1beta1.GenericAttestationPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("genericattestationpolicy"), name)
	}
	return obj.(*v1beta1.GenericAttestationPolicy), nil
}
